#!/usr/bin/env node


const program = require('commander');
const path = require('path');
const packageJson = require(path.resolve(__dirname, './package.json'))
const {
  generateFn,
  generateHOCFn
} = require(path.resolve(__dirname, 'template/index.js'));
const fs = require('fs');

const componentPath = path.resolve(__dirname, '..', '..', './src/components')
program
  .version(packageJson.version, '-v, --version')
  .option('-n --name <name>', 'name of component')
  .option('-d, --dir <dirname>', 'path of dir', componentPath)
  .option('-t, --template <template>', 'template of component', 'normal')
  .option('-c, --component <component>', 'component wraps HOC', 'div')
  .parse(process.argv);

const {
  name,
  dir,
  template,
  component
} = program;

const realDirPath = path.resolve(componentPath, dir)
const dirExist = fs.existsSync(realDirPath)
let data = null;
let fileExist = false;
if (!dirExist) {
  fs.mkdirSync(realDirPath, {
    recursive: true
  }, (err) => {
    if (err) throw err;
  });
}
if (template === 'normal') {
  fileExist = fs.existsSync(path.resolve(realDirPath, name + '.vue'));
  if (fileExist) {
    throw new Error('file is already exist');
  }
  data = generateFn,
    generateFn(name, path.resolve(realDirPath, name));
  fs.writeFileSync(path.resolve(realDirPath, name + '.vue'), data, {
    encoding: 'utf8'
  })
} else if (template.toLowerCase() === 'hoc') {
  fileExist = fs.existsSync(path.resolve(realDirPath, name + '.js'));
  if (fileExist) {
    throw new Error('file is already exist');
  }
  data = generateHOCFn(name, path.resolve(realDirPath, name), component);
  fs.writeFileSync(path.resolve(realDirPath, name + '.js'), data, {
    encoding: 'utf8'
  })
}
console.info('create component successfully!')